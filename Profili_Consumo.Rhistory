library(dplyr)
library(tidyr)
library(lubridate)
# Assuming your_data is your data frame
# Convert timestamp column to Date format
dati_ut$data_misura <- as.Date(dati_ut$data_misura
, format = "%Y-%m-%d")
# 1. Calculate the time span (number of months) between consecutive measurements
dati_ut <- dati_ut %>%
arrange(data_misura) %>%
mutate(time_span_months = c(NA, as.numeric(diff(data_misura))
dati_ut <- dati_ut %>%
# 3. Calculate the average monthly consumption for each period
average_monthly_consumption <- dati_ut %>%
group_by(data_misura) %>%
summarize(average_monthly_consumption = mean(dati_ut$valore_misura, na.rm = TRUE))
# 4. Create observations for each month in the period from t-1 to t
observation_data <- dati_ut %>%
complete(data_misura = seq(min(dati_ut$data_misura), max(dati_ut$data_misura), by = "month")) %>%
left_join(average_monthly_consumption, by = "data_misura") %>%
select(average_monthly_consumption, month = month(data_misura), year = year(data_misura), id_gestore, id_utente_ges)
rlang::last_trace()
View(average_monthly_consumption)
# 4. Create observations for each month in the period from t-1 to t
observation_data <- dati_ut %>%
complete(data_misura = seq(min(dati_ut$data_misura), max(dati_ut$data_misura), by = "month")) %>%
left_join(average_monthly_consumption, by = "data_misura") %>%
select(average_monthly_consumption, month = month(data_misura), year = year(data_misura), id_gestore, id_utente_ges)
rlang::last_trace()
dati_ut <- read.csv("~/Desktop/dati_ut.csv", sep=";")
View(dati_ut)
# Load necessary libraries
library(dplyr)
library(tidyr)
library(lubridate)
# Assuming your_data is your data frame
# Convert timestamp column to Date format
dati_ut$data_misura <- as.Date(dati_ut$data_misura
, format = "%Y-%m-%d")
# 1. Calculate the time span (number of months) between consecutive measurements
dati_ut <- dati_ut %>%
arrange(data_misura) %>%
mutate(time_span_months = c(NA, as.numeric(diff(data_misura))
View(dati_ut)
View(dati_ut)
# Assuming your_data is your data frame and timestamp is the column containing dates
your_data$timestamp <- as.Date(your_data$timestamp, format = "%Y-%m-%d")
# Assuming your_data is your data frame and timestamp is the column containing dates
dati_ut$data_misura <- as.Date(dati_ut$data_misura, format = "%Y-%m-%d")
# Assuming your_data is your data frame and timestamp is the column containing dates
dati_ut$data_misura <- as.Date(dati_ut$data_misura, format = "%Y-%m-%d")
load("~/Dati(mod).RData")
View(dati_ut)
# Assuming your_data is your data frame
dati_ut <- data.frame(
months_since_previous = c(1, 2, 3),
)
dati_ut <- data.frame(
months_since_previous = c(1, 2, 3)
)
# Convert integer columns to numeric
dati_ut[] <- lapply(dati_ut, as.numeric)
# Print the result
print(dati_ut)
load("~/Dati(mod).RData")
View(dati_ut)
dati_ut <- dati_ut %>%
arrange(data_misura) %>%
mutate(time_span_months = c(NA, as.numeric(diff(data_misura))
# Assuming your_data is your data frame
library(dplyr)
install.packages("dplyr")
library(dplyr)
dati_ut <- dati_ut %>%
group_by(data_misura) %>%
summarize(total_consumption = sum(valore_misura, na.rm = TRUE))
# Print the result
print(dati_ut)
# Assuming your_data is your data frame and timestamp is the column containing dates
dati_ut$month <- as.Date(dati_ut$month, format = "%Y-%m-%d")
# Assuming your_data is your data frame and timestamp is the column containing dates
dati_ut$data_misura <- as.Date(dati_ut$data_misura, format = "%Y-%m-%d")
# Create a new column with month names
dati_ut$month_names <- format(dati_ut$month, "%B")
# Print the result
print(dati_ut)
# Assuming your_data is your data frame
library(dplyr)
library(lubridate)
dati_ut <- dati_ut %>%
mutate(data_misura = as.Date(data_misura)) %>%
group_by(month = floor_date(data_misura, "month")) %>%
summarize(absolute_consumption = sum(total_consumption, na.rm = TRUE))
# Print the result
print(dati_ut)
dati_ut$consumption_diff <- c(NA, diff(dati_ut$valore_misura))
dati_ut$consumption_diff <- c(NA, diff(dati_ut$absolute_consumption))
View(dati_ut)
save.image("~/Consumption_mod.RData")
dati_ut <- read.csv("~/Desktop/dati_ut.csv", sep=";")
View(dati_ut)
# Assuming your_data is your data frame
library(dplyr)
library(lubridate)
# Convert timestamp to Date format
dati_ut$data_misura <- as.Date(dati_ut$data_misura, format = "%Y-%m-%d")
# 1. Calculate the time span (number of months) between consecutive measurements
dati_ut <- dati_ut %>%
arrange(data_misura) %>%
mutate(time_span_months = c(NA, as.numeric(diff(data_misura), units = "months")))
# Assuming your_data is your data frame
library(dplyr)
library(lubridate)
# Convert timestamp to Date format
dati_ut$data_misura <- as.Date(dati_ut$data_misura, format = "%Y-%m-%d")
# 1. Calculate the time span (number of months) between consecutive measurements
dati_ut <- dati_ut %>%
arrange(data_misura) %>%
mutate(time_span_months = c(NA, as.numeric(diff(data_misura), ), units = "days") / 30)
rlang::last_trace()
# Assuming your_data is your data frame
library(dplyr)
library(lubridate)
# Convert timestamp to Date format
dati_ut$data_misura <- as.Date(dati_ut$data_misura, format = "%Y-%m-%d")
# 1. Calculate the time span (number of months) between consecutive measurements
dati_ut <- dati_ut %>%
arrange(data_misura) %>%
dati_ut$months_since_previous <- c(NA, as.numeric(diff(dati_ut$data_misura), units = "days") / 30)
# Assuming your_data is your data frame
library(dplyr)
library(lubridate)
# Convert timestamp to Date format
dati_ut$data_misura <- as.Date(dati_ut$data_misura, format = "%Y-%m-%d")
# 1. Calculate the time span (number of months) between consecutive measurements
dati_ut$months_since_previous <- c(NA, as.numeric(diff(dati_ut$data_misura), units = "days") / 30)
# 2. Calculate the total consumption for each period
dati_ut <- dati_ut %>%
arrange(data_misura) %>%
mutate(total_consumption = c(cumsum(diff(c(0, dati_ut$valore_misura)))))
# 3. Calculate average monthly consumption for each period
average_monthly_consumption <- dati_ut %>%
group_by(data_misura) %>%
summarize(average_consumption = mean(dati_ut$valore_misura, na.rm = TRUE))
# 4. Create observations for each month in the period from t-1 to t
observation_data <- dati_ut %>%
complete(data_misura = seq(min(dati_ut$data_misura), max(data_ut$data_misura), by = "month")) %>%
left_join(average_monthly_consumption, by = "data_misura") %>%
select(average_consumption,
month = month(data_misura),
year = year(data_misura),
id_gestore,
id_utente_ges)
library(tidyr)
# Assuming your_data is your data frame
library(dplyr)
library(lubridate)
library(tidyr)
# Convert timestamp to Date format
dati_ut$data_misura <- as.Date(dati_ut$data_misura, format = "%Y-%m-%d")
# 1. Calculate the time span (number of months) between consecutive measurements
dati_ut$months_since_previous <- c(NA, as.numeric(diff(dati_ut$data_misura), units = "days") / 30)
# 2. Calculate the total consumption for each period
dati_ut <- dati_ut %>%
arrange(data_misura) %>%
mutate(total_consumption = c(cumsum(diff(c(0, dati_ut$valore_misura)))))
# 3. Calculate average monthly consumption for each period
average_monthly_consumption <- dati_ut %>%
group_by(data_misura) %>%
summarize(average_consumption = mean(dati_ut$valore_misura, na.rm = TRUE))
# 4. Create observations for each month in the period from t-1 to t
observation_data <- dati_ut %>%
complete(data_misura = seq(min(dati_ut$data_misura), max(data_ut$data_misura), by = "month")) %>%
left_join(average_monthly_consumption, by = "data_misura") %>%
select(average_consumption,
month = month(data_misura),
year = year(data_misura),
id_gestore,
id_utente_ges)
# Assuming your_data is your data frame
library(dplyr)
library(lubridate)
library(tidyr)
# Convert timestamp to Date format
dati_ut$data_misura <- as.Date(dati_ut$data_misura, format = "%Y-%m-%d")
# 1. Calculate the time span (number of months) between consecutive measurements
dati_ut$months_since_previous <- c(NA, as.numeric(diff(dati_ut$data_misura), units = "days") / 30)
# 2. Calculate the total consumption for each period
dati_ut <- dati_ut %>%
arrange(data_misura) %>%
mutate(total_consumption = c(cumsum(diff(c(0, dati_ut$valore_misura)))))
# 3. Calculate average monthly consumption for each period
average_monthly_consumption <- dati_ut %>%
group_by(data_misura) %>%
summarize(average_consumption = mean(dati_ut$valore_misura, na.rm = TRUE))
# 4. Create observations for each month in the period from t-1 to t
observation_data <- dati_ut %>%
complete(data_misura = seq(min(dati_ut$data_misura), max(dati_ut$data_misura), by = "month")) %>%
left_join(average_monthly_consumption, by = "data_misura") %>%
select(average_consumption,
month = month(data_misura),
year = year(data_misura),
id_gestore,
id_utente_ges)
dati_ut <- read.csv("~/Desktop/dati_ut.csv", sep=";")
View(dati_ut)
# Assuming your_data is your data frame
library(dplyr)
library(lubridate)
library(tidyr)
# Convert timestamp to Date format
dati_ut$data_misura <- as.Date(dati_ut$data_misura, format = "%Y-%m-%d")
# 1. Calculate the time span (number of months) between consecutive measurements
dati_ut <- dati_ut %>%
arrange(data_misura) %>%
mutate(time_span_months = c(NA, as.numeric(diff(data_misura), units = "months")))
rlang::last_trace()
rlang::last_trace()
load("~/Id_utente_ges.RData")
View(dati_ut)
load("~/Consumption (month and year).RData")
load("~/Consumption_mod.RData")
load("~/Task_1.RData")
vol_ut <- read.csv("~/Desktop/vol_ut.csv", header=FALSE, sep=";")
View(vol_ut)
View(dati_ut)
vol_ut$anno_consegna <- as.Date(vol_ut$anno_consegna, format = "%Y-%m-%d")
# Assuming your_data is your data frame and timestamp is the column containing dates
vol_ut$anno_consegna <- as.Date(vol_ut$anno_consegna, format = "%Y ")
load("~/Id_utente_ges.RData")
load("~/Id_utente_ges.RData")
library(dplyr)
# Assuming monthly_consumption is your monthly consumption data frame
# and user_data is your user data frame
merged_data <- observation_data %>%
left_join(dati_ut %>%
select(id_utente_ges, tipo_uso, X, Y, epsg, id_rete, note, pro_com, comune),
by = "id_utente_ges")
library(dplyr)
# Assuming monthly_consumption is your monthly consumption data frame
# and user_data is your user data frame
merged_data <- observation_data %>%
left_join(vol_ut %>%
select(id_utente_ges, tipo_uso, X, Y, epsg, id_rete, note, pro_com, comune),
by = "id_utente_ges")
# Assuming monthly_consumption is your monthly consumption data frame
# and user_data is your user data frame
merged_data <- vol_ut %>%
left_join(observation_data %>%
select(id_utente_ges, tipo_uso, X, Y, epsg, id_rete, note, pro_com, comune),
by = "id_utente_ges")
View(observation_data)
library(dplyr)
# Assuming monthly_consumption is your monthly consumption data frame
# and user_data is your user data frame
merged_data <- observation data_ut %>%
library(dplyr)
# Assuming monthly_consumption is your monthly consumption data frame
# and user_data is your user data frame
merged_data <- observation_ut %>%
left_join(vol_ut%>%
select(id_utente_ges, tipo_uso, X, Y, epsg, id_rete, note, pro_com, comune),
by = "id_utente_ges")
library(dplyr)
# Assuming monthly_consumption is your monthly consumption data frame
# and user_data is your user data frame
merged_data <- observation_data %>%
left_join(vol_ut%>%
select(id_utente_ges, tipo_uso, X, Y, epsg, id_rete, note, pro_com, comune),
by = "id_utente_ges")
library(dplyr)
# Assuming monthly_consumption is your monthly consumption data frame
# and user_data is your user data frame
# Check the column names in the user_data data frame
print(colnames(vol_ut))
# Check if the column exists in user_data
if (!"id_utente_ges" %in% colnames(vol_ut)) {
stop("Column 'id_utente_ges' not found in vol_ut.")
}
library(dplyr)
vol_ut <- vol_ut %>%
rename(id_utente_ges= V2)
vol_ut <- vol_ut %>%
rename(tipo_uso= V5)
vol_ut <- vol_ut %>%
rename(x= V6)
vol_ut <- vol_ut %>%
rename(y= V7)
vol_ut <- vol_ut %>%
rename(epsg= V8)
vol_ut <- vol_ut %>%
rename(id_rete= V13)
vol_ut <- vol_ut %>%
rename(note= V14)
vol_ut <- vol_ut %>%
rename(pro_com= V43)
vol_ut <- vol_ut %>%
rename(comune= V44)
vol_ut <- vol_ut %>%
rename(anno_consegna= V3)
vol_ut <- vol_ut %>%
rename(id_utente_ait= V1)
vol_ut <- vol_ut %>%
rename(id_gestore_ait= V4)
# Assuming your_data is your data frame and timestamp is the column containing dates
vol_ut$anno_consegna<- as.Date(vol_ut$anno_consegna, format = "%Y-%m-%d")
# Sort the data frame by timestamp to ensure it's in temporal order
vol_ut <- vol_ut[order(vol_ut$anno_consegna), ]
View(vol_ut)
# Assuming your_data is your data frame and timestamp is the column containing dates
vol_ut$anno_consegna<- as.Date(vol_ut$anno_consegna, format = "%Y ")
# Sort the data frame by timestamp to ensure it's in temporal order
vol_ut <- vol_ut[order(vol_ut$anno_consegna), ]
View(vol_ut)
View(vol_ut)
View(vol_ut)
load("~/Vol.RData")
load("~/Profili_Consumo.RData")
load("~/Profili_Consumo.RData")
View(vol_ut)
View(observation_data)
View(merged_data_1)
View(merged_data)
library(dplyr)
# Assuming your data frame is called df
merged_data_1_summed <- merged_data_1 %>%
group_by(consumption) %>%
summarise_all(sum)
library(dplyr)
# Assuming your data frame is called df
merged_data_1_summed <- merged_data_1 %>%
group_by(consumption) %>%
# Example of converting character column to numeric
merged_data_1$id_utente_ges <- as.numeric(merged_data_1$id_utente_ges)
# Load required libraries (if not already loaded)
# library(dplyr)
# Assuming merged_data_1 is your data frame
merged_data_1 <- merged_data_1 %>%
# Convert id_utente_ges to numeric
mutate(id_utente_ges = as.numeric(id_utente_ges)) %>%
# Group by the consumption column
group_by(consumption)
summarise_all(sum)
dplyr::last_dplyr_warnings()
# Load required libraries (if not already loaded)
# library(dplyr)
# Assuming merged_data_1 is your data frame
merged_data_1 <- merged_data_1 %>%
# Convert id_utente_ges to numeric
mutate(id_utente_ges = as.numeric(id_utente_ges)) %>%
# Group by the consumption column
group_by(consumption)
library(dplyr)
# Assuming your data frame is called df
df_summed <- merged_data_1 %>%
group_by(consumption) %>%
summarise_all(sum)
rlang::last_trace()
class(merged_data_1$year)
merged_data_1$year <- as.numeric(merged_data_1$year)
library(dplyr)
# Assuming your data frame is called df
df_summed <- merged_data_1 %>%
group_by(consumption) %>%
summarise_all(sum)
merged_data_1$month <- as.numeric(merged_data_1$month)
# Sample data frame
merged_data_1 <- data.frame(month = c("January", "February", "March", "April", "May"))
# Define a vector of month names
month_names <- c("January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December")
# Convert month names to month numbers using match
merged_data_1$month_number <- match(merged_data_1$month, month_names)
# Print the result
print(merged_data_2)
load("~/Profili_Consumo.RData")
View(dati_ut)
View(observation_data)
View(vol_ut)
# Sample data frame
merged_data_1 <- data.frame(month = c("January", "February", "March", "April", "May"))
# Define a vector of month names
month_names <- c("January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December")
# Convert month names to month numbers using match
merged_data_1$month_number <- match(merged_data_1$month, month_names)
# Print the result
print(merged_data_1)
View(merged_data)
View(merged_data)
View(merged_data)
View(merged_data)
View(merged_data_1)
load("~/Profili_Consumo.RData")
View(dati_ut)
View(merged_data)
View(merged_data_1)
import pandas as pd
pip install pandas
import pandas as pd
# Sample data
merged_data_1 <- data.frame(month = c("January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"))
# Define a vector of month names and corresponding month numbers
month_names <- c("January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December")
month_numbers <- 1:12
# Using match function
merged_data_1$month_numeric <- match(merged_data_1$month, month_names)
# Using factor and as.numeric
merged_data_1$month_numeric <- as.numeric(factor(merged_data_1$month, levels = month_names))
# Print the result
print(merged_data_1)
load("~/Profili_Consumo.RData")
View(dati_ut)
View(merged_data)
View(merged_data_1)
View(observation_data)
View(vol_ut)
# Load the dplyr package if not already loaded
library(dplyr)
# Create a mapping between month names and month numbers
month_name_to_number <- c("January" = 1, "February" = 2, "March" = 3, "April" = 4, "May" = 5, "June" = 6,
"July" = 7, "August" = 8, "September" = 9, "October" = 10, "November" = 11, "December" = 12)
# Assuming your data frame is named merged_data_1
merged_data_1 <- merged_data_1 %>%
mutate(month = month_name_to_number[month])
# Remove the original 'month_names' column if needed
# merged_data_1 <- merged_data_1 %>% select(-month)
# Assuming your_data is your data frame and timestamp is the column containing dates
merged_data_1$month <- as.Date(merged_data_1$month, format = "%m ")
# Sort the data frame by timestamp to ensure it's in temporal order
merged_data_1 <- merged_data_1[order(merged_data_1$month), ]
# Sort the data frame by timestamp to ensure it's in temporal order
merged_data_1 <- merged_data_1[order(merged_data_1$month), ]
load("~/Profili_Consumo.RData")
View(merged_data_1)
# Load the dplyr package if not already loaded
library(dplyr)
# Create a mapping between month names and month numbers
month_name_to_number <- c("January" = 1, "February" = 2, "March" = 3, "April" = 4, "May" = 5, "June" = 6,
"July" = 7, "August" = 8, "September" = 9, "October" = 10, "November" = 11, "December" = 12)
# Assuming your data frame is named merged_data_1
merged_data_1 <- merged_data_1 %>%
mutate(month = month_name_to_number[month])
# Remove the original 'month_names' column if needed
# merged_data_1 <- merged_data_1 %>% select(-month)
View(merged_data_1)
# Sort the data frame by timestamp to ensure it's in temporal order
merged_data_1 <- merged_data_1[order(merged_data_1$month), ]
gc()
# Sort the data frame by timestamp to ensure it's in temporal order
merged_data_1 <- merged_data_1[order(merged_data_1$month), ]
R --max-mem-size=8G
R --max-mem-size=8000M
ulimit -Sv 8000000  # Set the memory limit to 8 gigabytes
limit vmemoryuse 8000000  # Set the virtual memory limit to 8 gigabytes
limit vmemoryuse 8000000
memory.limit(size = 8000)
# Sort the data frame by timestamp to ensure it's in temporal order
merged_data_1 <- merged_data_1[order(merged_data_1$month), ]
# Example: Remove an RData file named "my_workspace.RData"
unlink("Vol.RData")
# Sort the data frame by timestamp to ensure it's in temporal order
merged_data_1 <- merged_data_1[order(merged_data_1$month), ]
rm(list = ls())
load("~/Profili_Consumo.RData")
# Assume you want to remove objects named "my_data" and "results"
rm(merged_data, observation_data, vol_ut, dati_ut)
View(merged_data_1)
# Load the dplyr package if not already loaded
library(dplyr)
# Create a mapping between month names and month numbers
month_name_to_number <- c("January" = 1, "February" = 2, "March" = 3, "April" = 4, "May" = 5, "June" = 6,
"July" = 7, "August" = 8, "September" = 9, "October" = 10, "November" = 11, "December" = 12)
# Assuming your data frame is named merged_data_1
merged_data_1 <- merged_data_1 %>%
mutate(month = month_name_to_number[month])
# Remove the original 'month_names' column if needed
# merged_data_1 <- merged_data_1 %>% select(-month)
View(merged_data_1)
rm(average_monthly_consumption)
# Sort the data frame by timestamp to ensure it's in temporal order
merged_data_1 <- merged_data_1[order(merged_data_1$month), ]
View(merged_data_1)
library(dplyr)
# Assuming your data frame is called df
df_summed <- merged_data_1 %>%
group_by(consumption) %>%
summarise_all(sum)
# Load required libraries (if not already loaded)
# library(dplyr)
# Assuming merged_data_1 is your data frame
merged_data_1 <- merged_data_1 %>%
# Convert id_utente_ges to numeric
mutate(id_utente_ges = as.numeric(id_utente_ges)) %>%
# Group by the consumption column
group_by(consumption)
summarise_all(sum)
id_utente_ges <- as.numeric(as.character(id_utente_ges))
# Check if the object exists
exists("id_utente_ges")
# Example assuming 'id_utente_ges' is part of a dplyr pipeline
library(dplyr)
merged_data_1 <- merged_data_1 %>%
mutate(id_utente_ges = as.numeric(id_utente_ges))
View(merged_data_1)
load("~/Profili_Consumo.RData")
View(average_monthly_consumption)
View(merged_data)
View(merged_data_1)
View(observation_data)
# Display the command history
history()
# Save command history to a file
savehistory("Profili_Consumo.Rhistory")
